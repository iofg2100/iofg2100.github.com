
概要
----

「PaintField」は、

- 使いやすいユーザーインターフェース
- クロスプラットフォーム (Mac, Linux, Windows対応)
- オープンソース (LGPL)
- 拡張性の高い設計

これらを掲げた、（主にペンタブレットを使用する）お絵描きソフトである。

現在、Webサイト (http://iofg2100.github.io/PaintField) にて公開中である。

また、GitHub (https://github.com/iofg2100/PaintField) にて開発を行なっている。

現在の主な機能として、以下のものがある。

- ペンタブレットに適したシンプルなブラシ（高機能なブラシは今後開発予定）
- テキスト、長方形、楕円をつくる（これらはベクターデータなので後から編集が可能）
- レイヤーの木構造
- 無限の取り消し・やり直し
- 各ファイルごとのタブ
- タブエリアを水平、垂直に分割する
- １つのファイルに対して複数のビューを持てる

.. figure:: demoshot.jpg
  :width: 100%

  Fig. スクリーンショット

来歴
----

- 2011年1月 開発開始
- 2013年1月 初のバイナリ版リリース
- 現在のバージョン: 0.0.6

動機
----

- Mac用でフリーのお絵描きソフトで、ペンタブを使ってのお絵描きがしやすいソフトがなかった
- せっかくなら、クロスプラットフォーム・オープンソースで作ってしまおう
- プログラミングの勉強にもなる

開発
----

PaintField の開発には以下のものを使った。

GUI ツールキット
  Qt

言語
  C++ (11)

GUI ツールキットについて
^^^^^^^^

GUI ツールキットとは、GUIを扱うためのライブラリ・環境であり、PaintFieldのようなGUIアプリを開発するときに必要である。

GUIツールキットの例:

- Windowsの様々なAPI(Windows API, MFC, Windows Forms, WPFなど…、詳細は調べていない)
- Cocoa (Objective-C, Mac)

クロスプラットフォームのもの:

- Qt (C++)
- wxWidgets (C++)
- GTK+ (C)
- Swing (Java)

など

PaintFieldでは、Qtを使用している。

Qtを選んだ理由
^^^^^^^^

- オープンソース(LGPL)
- クロスプラットフォーム

  GTK+もオープンソースでクロスプラットフォームだが、Qtの方がMac上で安定的に動作する。

- 企業にサポートされている

  Digia社 (以前はNokia)

- C++なので速い

  スムーズなお絵描き、操作感のために、実行速度の高い言語である必要がある。

- C++の標準ライブラリより簡単なC++のクラス（リストや文字列など）が用意されているので、C++の難しさが軽減される
  
  例えば、QList, QHash, QStringなどは、組み込み型と同じように値で取り扱っても問題がない。
  (内部でコピーオンライトになっている)

内部構造
----

.. figure:: architecture.svg
  :width: 100%

  Fig. PaintFieldの構造 (クラス図)

- AppController

  アプリケーション全体を管理するオブジェクト。
  アプリケーションの設定、Extension Factory（後述するExtensionを作るFactory）の管理なども行う。

- Workspace

  ワークスペース（各トップレベルウィンドウ）を管理するオブジェクト。
  各サイドバー、ツールバー、メニューバーなどがここに属する。

- Canvas

  キャンバス（各ファイルの編集画面）を管理するオブジェクト。

- Document

  書類。Canvasは1つのDocumentを参照する。Documentは複数のCanvasから参照されることが可能である。

- Extension

  いわゆる拡張機能である。

  AppExtension, WorkspaceExtension, CanvasExtension の3種類があり、
  それぞれ、AppController, Workspace, Canvasがつくられるときに一緒につくられる。

  Tool、サイドバー、メニューバーのアクションなどを提供し、機能を追加する。

  これを新たに書くことで、機能を楽に追加することができる。

- ExtensionFactory

  Extensionを必要に応じて作る。
  Extensionとセットで実装する。

- Tool

  ツールバーから選択できる、ブラシ、レイヤーの移動などのツールである。
  各Canvasごとに作られる。
  Canvasが受け取る入力イベント（タブレットのイベントなど）を肩代わりして、Documentに編集を行う。
  また、Canvasのレンダリングも一部肩代わりする。

PaintFieldに予め含まれる拡張機能の例
----

- BrushTool

  ブラシ関連の機能・ツールを提供している。

- VectorTools

  ベクターデータ関連のツール・機能を提供している。


画像フォーマット
----

PaintFieldは、各チャンネルが32bit floatのARGB画像フォーマットを使っている。

一般的に、画像データは、各チャンネル8bit unsigned intで表すことが多いが、
編集時に誤差が大きくなったり、計算の実装がしにくかったりする（これは、色の範囲が0-1ではなく0-255であるため）。

一方、floatは、編集時の誤差が少なく出来、計算の処理が実装しやすい。


SSE命令による演算の高速化
----

x86系CPUには、SSEという、SIMD演算（Single Instruction Multiple Data、1回の命令で複数のデータを演算すること）用命令セットがある。
例えば、32bit floatであれば、1度に4つのデータを同時に演算できる。

類似したものに、ARMのNEONなどがある。

通常はこれを意識してプログラミングで使うことはないが、使用すると演算が高速化できる。

PaintFieldは、各チャンネルがfloatのARGB画像フォーマットを使っているので、SSE命令と相性が良い。

SSE命令をC++で使う例
^^^^

.. code:: c++

  #include <emmintrin.h>
  #include <iostream>
  #include <array>

  union vecf4
  {
    __v4sf v; // __v4sfは、float*4のベクトル演算用の型
    std::array<float, 4> f;
  };

  int main()
  {
    vecf4 a, b;
    a.f = {1, 2, 3, 4};
    b.f = {5, 6, 7, 8};

    vecf4 c;
    c.v = a.v * b.v; 
    // SSEのベクトル演算が行われる
    // c = {5, 12, 21, 32}

    vecf4 d;
    d.v = __builtin_ia32_sqrtps(c.v);
    // SSEのsqrtps命令（平方根を計算する）を関数のように呼び出す
    // d = {2.23607 3.4641 4.58258 5.65685}

    for (float f : c.f)
      std::cout << f << " ";
    std::cout << std::endl;

    for (float f : d.f)
      std::cout << f << " ";
    std::cout << std::endl;

    return 0;
  }


レイヤーの画像データの扱い
----

.. figure:: tiledsurface.svg
  :width: 25%

  Fig. レイヤーの例 (斜線部分のみデータが確保される)

PaintFieldのラスターレイヤーでは、画像を64*64という小さいサイズに分割して、必要な部分にのみそれを割り当てている。

この方法には様々な利点がある。

- レイヤーのサイズが無限大に出来る

- 必要最低限のメモリ使用量で済む

- 参照の局所性が保たれる

  ブラシで描き込むときなどに、分割された小さい画像データを扱うので、
  大きな画像データを扱うのに比べ、アクセスするメモリ領域が小さく済む（これを参照の局所性という）。

  これによって、キャッシュヒット率が上がりパフォーマンスが向上する。

ブラシ
----

PaintFieldのブラシの描画では、２種類の方法を採用している。

- 1px間隔で円を順番に描画していく方式 (Simple Brush)
  
  描画量が少ない時にパフォーマンスが有利。

- ベクターデータを生成して描画していく方式 (Pen)

  描画量が多い (長距離を描画する) 時にパフォーマンスが有利。


曲線補間
----

.. figure:: bspline.svg
  :width: 25%

  Fig. B-Spline補間の例

PaintFieldのブラシは、曲線補間のオンオフができる。

ペンタブレットからの入力イベントは、7.5ms毎 (CTH-661の場合) に送られてくるので、曲線補間が無くてもほぼ十分な情報量があるが、
より綺麗に描きたい場合、マウスで描く場合には、曲線補間が必要である。

PaintFieldの曲線補間は、3次のB-Spline補間である。4点から、2点目と3点目の間の曲線補間を割り出す。

同様の方式に、Catmull-Rom補間がある。Catmull-Rom補間は与えられた点を通るのに対し、B-Spline補間は通らず、よりなめらかな曲線を出力する。

また、3次のB-Spline補間も、Catmull-Rom補間も、3次のパラメトリック曲線なので、
同様に3次のパラメトリック曲線であるベジエ曲線に変換することが可能である (src/libs/Malachite/src/curves.hを参照せよ)。

描画ライブラリ
----

Qtの描画エンジンは、floatの画像に対応していないため、PaintFieldでは、Malachite (https://github.com/iofg2100/Malachite)という自作の2D描画ライブラリを使用している。
ベジエ曲線、グラデーションなどの描画が可能である。

ラスタライザには、Anti-Grain Geometry (http://www.antigrain.com/) を使用している。

今後の課題
----

PaintFieldはお絵描きソフトとして機能が不完全な部分も多く (選択範囲、高機能なブラシ、フィルタなどが欠けている)
さらなる機能の追加が必要である。

また、コードが文書化されていない (コメントも少ない) ので、他の人が開発に参加するのが難しい。
せっかくオープンソースでGitHubで開発しているので、多数の人が開発に参加できるような状態にしていきたい。

PaintFieldをより魅力あるプロジェクトにすることで、継続的、発展的な開発をしていきたい。
